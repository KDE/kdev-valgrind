<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>Valgrind::DrdConfigPage</class>
 <widget class="QWidget" name="Valgrind::DrdConfigPage">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>676</width>
    <height>558</height>
   </rect>
  </property>
  <layout class="QVBoxLayout" name="verticalLayout_2">
   <item>
    <widget class="QGroupBox" name="groupBox">
     <layout class="QFormLayout" name="formLayout">
      <item row="0" column="0">
       <widget class="QLabel" name="joinListVolLabel">
        <property name="text">
         <string>Joined threads memory access list volume:</string>
        </property>
        <property name="buddy">
         <cstring>kcfg_joinListVol</cstring>
        </property>
       </widget>
      </item>
      <item row="0" column="1">
       <widget class="QSpinBox" name="kcfg_joinListVol">
        <property name="toolTip">
         <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Data races that occur between a statement at the end of one thread and another thread can be missed if memory access information is discarded immediately after a thread has been joined. This option allows to specify for how many joined threads memory access information should be retained.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
        </property>
       </widget>
      </item>
      <item row="3" column="0">
       <widget class="QLabel" name="segmentMergingIntervalLabel">
        <property name="text">
         <string>Segment merging interval:</string>
        </property>
       </widget>
      </item>
      <item row="3" column="1">
       <widget class="QSpinBox" name="kcfg_segmentMergingInterval">
        <property name="toolTip">
         <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Perform segment merging only after the specified number of new segments have been created. This is an advanced configuration option that allows to choose whether to minimize DRD's memory usage by choosing a low value or to let DRD run faster by choosing a slightly higher value. The optimal value for this parameter depends on the program being analyzed. The default value works well for most programs.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
        </property>
       </widget>
      </item>
      <item row="4" column="0">
       <widget class="QLabel" name="extraArgsLabel">
        <property name="text">
         <string>Extra parameters:</string>
        </property>
        <property name="buddy">
         <cstring>kcfg_extraArgs</cstring>
        </property>
       </widget>
      </item>
      <item row="4" column="1">
       <widget class="QLineEdit" name="kcfg_extraArgs">
        <property name="clearButtonEnabled">
         <bool>true</bool>
        </property>
       </widget>
      </item>
     </layout>
    </widget>
   </item>
   <item>
    <widget class="QTabWidget" name="tabWidget">
     <property name="currentIndex">
      <number>0</number>
     </property>
     <widget class="QWidget" name="tab">
      <attribute name="title">
       <string>Common options</string>
      </attribute>
      <layout class="QVBoxLayout" name="verticalLayout">
       <item>
        <widget class="QCheckBox" name="kcfg_checkStackVar">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Controls whether DRD detects data races on stack variables. Verifying stack variables is disabled by default because most programs do not share stack variables over threads.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Detect data races on stack variables</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_firstRaceOnly">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Whether to report only the first data race that has been detected on a memory location or all data races that have been detected on a memory location.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Report only the first data race</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_freeIsWrite">
         <property name="enabled">
          <bool>true</bool>
         </property>
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Whether to report races between accessing memory and freeing memory. Enabling this option may cause DRD to run slightly slower. Notes:&lt;/p&gt;&lt;p&gt;Don't enable this option when using custom memory allocators that use the &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;VG_USERREQ__MALLOCLIKE_BLOCK&lt;/span&gt; and &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;VG_USERREQ__FREELIKE_BLOCK&lt;/span&gt; because that would result in false positives. &lt;/p&gt;&lt;p&gt;Don't enable this option when using reference-counted objects because that will result in false positives, even when that code has been annotated properly with &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;ANNOTATE_HAPPENS_BEFORE&lt;/span&gt; and &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;ANNOTATE_HAPPENS_AFTER&lt;/span&gt;. See e.g. the output of the following command for an example: &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;valgrind --tool=drd --free-is-write=yes drd/tests/annotate_smart_pointer&lt;/span&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Report races between accessing and freeing memory</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_reportSignalUnlocked">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Whether to report calls to &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;pthread_cond_signal&lt;/span&gt; and &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;pthread_cond_broadcast&lt;/span&gt; where the mutex associated with the signal through &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;pthread_cond_wait&lt;/span&gt; or &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;pthread_cond_timed_wait&lt;/span&gt; is not locked at the time the signal is sent. Sending a signal without holding a lock on the associated mutex is a common programming error which can cause subtle race conditions and unpredictable behavior. There exist some uncommon synchronization patterns however where it is safe to send a signal without holding a lock on the associated mutex.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Report calls to unlocked signals</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_segmentMerging">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Controls segment merging. Segment merging is an algorithm to limit memory usage of the data race detection algorithm. Disabling segment merging may improve the accuracy of the so-called 'other segments' displayed in race reports but can also trigger an out of memory error.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Segment merging</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_showConflSeg">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Show conflicting segments in race reports. Since this information can help to find the cause of a data race, this option is enabled by default. Disabling this option makes the output of DRD more compact.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Show conflicting segments</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_showStackUsage">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Print stack usage at thread exit time. When a program creates a large number of threads it becomes important to limit the amount of virtual memory allocated for thread stacks. This option makes it possible to observe how much stack memory has been used by each thread of the client program.&lt;/p&gt;&lt;p&gt;Note: the DRD tool itself allocates some temporary data on the client thread stack. The space necessary for this temporary data must be allocated by the client program when it allocates stack memory, but is not included in stack usage reported by DRD.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Show stack usage</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_ignoreThreadCreation">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Controls whether all activities during thread creation should be ignored. By default enabled only on Solaris. Solaris provides higher throughput, parallelism and scalability than other operating systems, at the cost of more fine-grained locking activity. This means for example that when a thread is created under glibc, just one big lock is used for all thread setup. Solaris libc uses several fine-grained locks and the creator thread resumes its activities as soon as possible, leaving for example stack and TLS setup sequence to the created thread. This situation confuses DRD as it assumes there is some false ordering in place between creator and created thread; and therefore many types of race conditions in the application would not be reported. To prevent such false ordering, this command line option is set to &lt;span style=&quot; font-family:'Monospace';&quot;&gt;yes&lt;/span&gt; by default on Solaris. All activity (loads, stores, client requests) is therefore ignored during:&lt;/p&gt;&lt;p&gt;* pthread_create() call in the creator thread &lt;/p&gt;&lt;p&gt;* thread creation phase (stack and TLS setup) in the created thread&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Ignore thread creation</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="Line" name="line">
         <property name="orientation">
          <enum>Qt::Horizontal</enum>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_showInstructionPointer">
         <property name="text">
          <string>Show stack frame instruction pointer value</string>
         </property>
        </widget>
       </item>
       <item>
        <spacer>
         <property name="orientation">
          <enum>Qt::Vertical</enum>
         </property>
         <property name="sizeHint" stdset="0">
          <size>
           <width>20</width>
           <height>0</height>
          </size>
         </property>
        </spacer>
       </item>
      </layout>
     </widget>
     <widget class="QWidget" name="tracesTab">
      <attribute name="title">
       <string>Trace options</string>
      </attribute>
      <layout class="QVBoxLayout" name="verticalLayout_3">
       <item>
        <widget class="QCheckBox" name="kcfg_traceAlloc">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Trace all memory allocations and deallocations. May produce a huge amount of output.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Trace memory allocations/deallocations</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_traceBarrier">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Trace all barrier activity.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Trace barrier activity</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_traceCond">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Trace all condition variable activity.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Trace condition variable activity</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_traceForkJoin">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Trace all thread creation and all thread termination events.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Trace thread creation/termination events</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_traceHb">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Trace execution of the &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;ANNOTATE_HAPPENS_BEFORE()&lt;/span&gt;, &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;ANNOTATE_HAPPENS_AFTER()&lt;/span&gt; and &lt;span style=&quot; font-family:'Monospace'; font-weight:600; font-style:italic;&quot;&gt;ANNOTATE_HAPPENS_DONE()&lt;/span&gt; client requests.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Trace execution of &quot;ANNOTATE_HAPPENS&quot; requests</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_traceMutex">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Trace all mutex activity.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Trace mutex activity</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_traceRwlock">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Trace all reader-writer lock activity.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Trace reader-writer lock activity</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QCheckBox" name="kcfg_traceSemaphore">
         <property name="toolTip">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Trace all semaphore activity.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="text">
          <string>Trace semaphore activity</string>
         </property>
        </widget>
       </item>
       <item>
        <spacer name="verticalSpacer">
         <property name="orientation">
          <enum>Qt::Vertical</enum>
         </property>
         <property name="sizeHint" stdset="0">
          <size>
           <width>20</width>
           <height>0</height>
          </size>
         </property>
        </spacer>
       </item>
      </layout>
     </widget>
    </widget>
   </item>
   <item>
    <spacer name="verticalSpacer_2">
     <property name="orientation">
      <enum>Qt::Vertical</enum>
     </property>
     <property name="sizeHint" stdset="0">
      <size>
       <width>20</width>
       <height>52</height>
      </size>
     </property>
    </spacer>
   </item>
  </layout>
 </widget>
 <tabstops>
  <tabstop>kcfg_joinListVol</tabstop>
  <tabstop>kcfg_segmentMergingInterval</tabstop>
  <tabstop>kcfg_extraArgs</tabstop>
  <tabstop>tabWidget</tabstop>
  <tabstop>kcfg_checkStackVar</tabstop>
  <tabstop>kcfg_firstRaceOnly</tabstop>
  <tabstop>kcfg_freeIsWrite</tabstop>
  <tabstop>kcfg_reportSignalUnlocked</tabstop>
  <tabstop>kcfg_segmentMerging</tabstop>
  <tabstop>kcfg_showConflSeg</tabstop>
  <tabstop>kcfg_showStackUsage</tabstop>
  <tabstop>kcfg_ignoreThreadCreation</tabstop>
  <tabstop>kcfg_showInstructionPointer</tabstop>
  <tabstop>kcfg_traceAlloc</tabstop>
  <tabstop>kcfg_traceBarrier</tabstop>
  <tabstop>kcfg_traceCond</tabstop>
  <tabstop>kcfg_traceForkJoin</tabstop>
  <tabstop>kcfg_traceHb</tabstop>
  <tabstop>kcfg_traceMutex</tabstop>
  <tabstop>kcfg_traceRwlock</tabstop>
  <tabstop>kcfg_traceSemaphore</tabstop>
 </tabstops>
 <resources/>
 <connections/>
</ui>
